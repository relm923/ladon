#!/usr/bin/env ruby
require 'optparse'
require 'ladon/automation_runner'

# These are the formatters that can currently be applied
# to the automation results object
FORMATTER_OPTIONS = %w[to_s to_json to_h to_junit].freeze

# These are the flags that accept comma-separated values
#   categorized as 'Array' flags
# NOTE: if adding a new Array flag, specify it here!
# See _correct_flags for more information
COMMA_FLAGS = ['-i', '--interactive', '-f', '--flags'].freeze

# rubocop:disable Metrics/AbcSize, Metrics/MethodLength, Metrics/BlockLength
def _parse_options(argv)
  # any 'Array' flags that accept comma-separated values must be corrected
  argv = _correct_flags(argv)
  flags = { LadonAutomationRunner::TARGET_AUTOMATION_FLAGS.name => {} }

  OptionParser.new do |opts|
    opts.banner = 'Usage: ladon-run [options]'

    opts.on('-a PATH',
            '--automation PATH',
            String,
            '[REQUIRED] Path to the target automation script to be executed') do |val|
      flags[LadonAutomationRunner::TARGET_AUTOMATION_PATH.name] = val
    end

    opts.on('-s NAME',
            '--automation_class NAME',
            String,
            'Name of the target Automation class to run.') do |val|
      flags[LadonAutomationRunner::TARGET_AUTOMATION_CLASS_NAME.name] = val
    end

    opts.on('-i PHASE_LIST',
            '--interactive PHASE_LIST',
            String,
            'Comma-separated list of phase names to enter interactive mode BEFORE running') do |val|
      flags[LadonAutomationRunner::INTERACTIVE_PHASES.name] = val.split(',').map { |phase| phase.strip.to_sym }
    end

    # This flag is HACKY: won't work with flag values that have commas in them.
    opts.on('-f FLAG',
            '--flags FLAG',
            Array,
            'Flags to give the target automation. Comma-separated list of name:value pairs; may be repeated.') do |val|
      val.map { |el| el.split(':', 2) }.each do |flag_name, flag_value|
        flags[LadonAutomationRunner::TARGET_AUTOMATION_FLAGS.name][flag_name.to_sym] = flag_value
      end
    end

    opts.on('-r', '--review', 'Use Pry to review after target automation completes') do
      flags[LadonAutomationRunner::PRY.name] = true
    end

    opts.on('-p PATH',
            '--result_file_path PATH',
            "File to store target's formatted Result data. File extensions used to determine format.") do |val|
      flags[Ladon::Automator::Automation::OUTPUT_FILE.name] = val
    end

    opts.on('--formatter FMT',
            "Formatting method to call on target's Result for output (ex: to_s)") do |val|
      unless FORMATTER_OPTIONS.include? val
        raise OptionParser::InvalidOption, "#{val} is not a valid formatter. Select from: #{FORMATTER_OPTIONS}"
      end
      flags[Ladon::Automator::Automation::OUTPUT_FORMAT.name] = val.strip
    end

    opts.on('-l LEVEL',
            '--log_level LOG_LEVEL',
            String,
            'Minimum level of log messages to output (ex: INFO)') do |val|
      flags[LadonAutomationRunner::LOG_LEVEL.name] = val.strip.upcase.to_sym
    end

    opts.on('-h', '--help', 'Prints this help message') do
      puts opts
      exit
    end
  end.parse!(argv)

  flags
end
# rubocop:enable Metrics/AbcSize, Metrics/MethodLength, Metrics/BlockLength

# Utility function (hack) to recreate +argv+ so it's parsed
# identically in Unix and Windows. Windows Powershell/CmdPrompt
# will split on whitespace or ','; this causes incorrect argument
# parsing of +COMMA_FLAGS+ that can take multiple comma-split values
def _correct_flags(argv)
  new_argv = []
  on_flag = 0
  created = false
  argv.each do |arg|
    if arg.start_with?('-')
      # We have an Array flag
      on_flag = COMMA_FLAGS.include? arg
      created = false
    elsif on_flag
      # All elements following an Array flag that aren't flags
      # should be concatenated with commas
      if created
        new_argv[-1] = "#{new_argv[-1]},#{arg}"
        next
      end
      created = true
    end
    new_argv << arg
  end
  new_argv
end

options = _parse_options(ARGV)
runner_result = LadonAutomationRunner.spawn(flags: options,
                                            log_level: options[:log_level]).run

puts "\nLadon Run complete (runner status: #{runner_result.status})\n\n"

exit_code = runner_result.success? ? 0 : 1
exit(exit_code) # exit with code
